options {
    CHOICE_AMBIGUITY_CHECK = 1;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(JsonParser)

package com.eatthepath.json;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class JsonParser {
}

PARSER_END(JsonParser)

TOKEN_MGR_DECLS :
{
  private static final Map<String, Character> ESCAPED_CHARACTERS = new HashMap<>();

  static {
    ESCAPED_CHARACTERS.put("\\\"", '\"');
    ESCAPED_CHARACTERS.put("\\\\", '\\');
    ESCAPED_CHARACTERS.put("\\/", '/');
    ESCAPED_CHARACTERS.put("\\b", '\b');
    ESCAPED_CHARACTERS.put("\\f", '\f');
    ESCAPED_CHARACTERS.put("\\n", '\n');
    ESCAPED_CHARACTERS.put("\\r", '\r');
    ESCAPED_CHARACTERS.put("\\t", '\t');
  }
}

SKIP : {
    " " | "\t" | "\r" | "\n"
}

SKIP : {
    "\"" : WithinString
}

<WithinString> MORE : {
    <ESCAPED_CONTROL_CHARACTER: "\\" ["\"", "\\", "/", "b", "f", "n", "r", "t"]> {
        final char escapedCharacter = ESCAPED_CHARACTERS.get(image.substring(image.length() - lengthOfMatch));

        image.setLength(image.length() - lengthOfMatch);
        image.append(escapedCharacter);
    } |

    <#HEX_DIGIT: ["0"-"9", "a"-"f", "A"-"F"]> |
    <ESCAPED_UNICODE_CHARACTER: "\\u" <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT>> {
        final char unicodeCharacter = (char) Integer.parseInt(image.substring(image.length() - 4), 16);

        image.setLength(image.length() - lengthOfMatch);
        image.append(unicodeCharacter);
    } |

    <NON_CONTROL_CHARACTER: ~["\"", "\\", "\b", "\f", "\n", "\r", "\t"]>
}

<WithinString> TOKEN : {
    <STRING: "\""> {
        matchedToken.image = image.substring(0, image.length() - 1);
    } : DEFAULT
}

TOKEN : {
    <#DECIMAL_DIGIT: ["0"-"9"]> |
    <INTEGER: ("-")? (<DECIMAL_DIGIT>)+> |
    <FLOAT: ("-")? (<DECIMAL_DIGIT>)+ ("." (<DECIMAL_DIGIT>)+)? (["e", "E"] (["+", "-"])? (<DECIMAL_DIGIT>)+)?> |

    <TRUE: "true"> |
    <FALSE: "false"> |

    <NULL: "null">
}

Map<String, Object> object():
{
    final Map<String, Object> map = new HashMap<>();

    String key;
    Object value;
}
{
    "{" (key = string() ":" value = value() { map.put(key, value); }
        ("," key = string() ":" value = value() { map.put(key, value); })*
    )? "}" { return map; }
}

List<Object> list():
{
    final List<Object> list = new ArrayList<>();
    Object element;
}
{
    "[" (element = value() { list.add(element); }
        ("," element = value() { list.add(element); })*
    )? "]" { return list; }
}

Object value():
{
    final Object value;
}
{
    (
        value = string() |
        value = number() |
        value = object() |
        value = list() |
        <TRUE> { value = true; } |
        <FALSE> { value = false; } |
        <NULL> { value = null; }
    ) { return value; }
}

String string():
{
    final Token token;
}
{
    token = <STRING> { return token.image; }
}

Number number():
{
    final Number number;
    final Token token;
}
{
    (
        token = <INTEGER> { number = Long.parseLong(token.image, 10); } |
        token = <FLOAT> { number = Double.parseDouble(token.image); }
    ) { return number; }
}
